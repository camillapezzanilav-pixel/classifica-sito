from flask import Flask, render_template, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
from geopy.geocoders import Nominatim
from math import radians, sin, cos, sqrt, atan2
import os

app = Flask(__name__)
app.secret_key = "super-secret-key"

# --- CONFIG DB ---
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///" + os.path.join(BASE_DIR, "db.sqlite3")
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

db = SQLAlchemy(app)

# --- MODELLI ---
class Squadra(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(200), nullable=False)
    partecipanti = db.relationship("Partecipante", backref="squadra", cascade="all, delete-orphan")
    punteggi = db.relationship("Punteggio", backref="squadra", cascade="all, delete-orphan")

class Partecipante(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(200), nullable=False)
    data_nascita = db.Column(db.Date, nullable=True)
    paese = db.Column(db.String(200), nullable=True)
    provincia = db.Column(db.String(100), nullable=True)
    lat = db.Column(db.Float, nullable=True)
    lon = db.Column(db.Float, nullable=True)
    squadra_id = db.Column(db.Integer, db.ForeignKey("squadra.id"), nullable=False)

class Gioco(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(200), nullable=False)
    punteggi = db.relationship("Punteggio", backref="gioco", cascade="all, delete-orphan")

class Punteggio(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    gioco_id = db.Column(db.Integer, db.ForeignKey("gioco.id"), nullable=False)
    squadra_id = db.Column(db.Integer, db.ForeignKey("squadra.id"), nullable=False)
    punti = db.Column(db.Float, nullable=False, default=0.0)
    __table_args__ = (db.UniqueConstraint("gioco_id", "squadra_id", name="uniq"),)

# --- CREA DB ---
with app.app_context():
    db.create_all()

# --- FUNZIONE DISTANZA ---
def haversine(lat1, lon1, lat2, lon2):
    R = 6371
    dlat = radians(lat2-lat1)
    dlon = radians(lon2-lon1)
    a = sin(dlat/2)**2 + cos(radians(lat1))*cos(radians(lat2))*sin(dlon/2)**2
    return 2*R*atan2(sqrt(a), sqrt(1-a))

# --- HOME (con classifica + statistiche) ---
@app.route("/")
def home():
    # classifica
    squadre = Squadra.query.all()
    totali = []
    for s in squadre:
        tot = sum(p.punti for p in s.punteggi)
        totali.append((s, tot))
    totali.sort(key=lambda x: x[1], reverse=True)

    # statistiche
    persone = Partecipante.query.all()
    giovani = [p for p in persone if p.data_nascita]
    piu_giovane = max(giovani, key=lambda p: p.data_nascita, default=None)
    piu_vecchio = min(giovani, key=lambda p: p.data_nascita, default=None)

    ref_lat, ref_lon = 45.0123, 10.2585  # Ragazzola
    piu_lontano, distanza = None, None
    for p in persone:
        if p.lat and p.lon:
            d = haversine(ref_lat, ref_lon, p.lat, p.lon)
            if distanza is None or d > distanza:
                distanza = d
                piu_lontano = p

    return render_template("home.html",
                           totali=totali,
                           piu_giovane=piu_giovane,
                           piu_vecchio=piu_vecchio,
                           piu_lontano=piu_lontano,
                           distanza=distanza,
                           ref="Ragazzola (PR)")

# --- GIOCHI ---
@app.route("/giochi", methods=["GET", "POST"])
def giochi():
    if request.method == "POST":
        nome = request.form.get("nome", "").strip()
        if nome:
            db.session.add(Gioco(nome=nome))
            db.session.commit()
            flash("Gioco aggiunto!", "success")
        return redirect(url_for("giochi"))
    return render_template("giochi.html", giochi=Gioco.query.all())

@app.route("/giochi/<int:gid>", methods=["GET", "POST"])
def gioco_detail(gid):
    gioco = Gioco.query.get_or_404(gid)
    squadre = Squadra.query.all()
    if request.method == "POST":
        for s in squadre:
            val = request.form.get(f"punti_{s.id}")
            if val:
                punti = float(val.replace(",", "."))
                p = Punteggio.query.filter_by(gioco_id=gioco.id, squadra_id=s.id).first()
                if p:
                    p.punti = punti
                else:
                    db.session.add(Punteggio(gioco_id=gioco.id, squadra_id=s.id, punti=punti))
        db.session.commit()
        flash("Punteggi salvati!", "success")
        return redirect(url_for("gioco_detail", gid=gioco.id))
    punteggi = {p.squadra_id: p.punti for p in gioco.punteggi}
    return render_template("gioco_detail.html", gioco=gioco, squadre=squadre, punteggi=punteggi)

# --- SQUADRE ---
@app.route("/squadre", methods=["GET", "POST"])
def squadre():
    if request.method == "POST":
        nome = request.form.get("nome", "").strip()
        if nome:
            db.session.add(Squadra(nome=nome))
            db.session.commit()
            flash("Squadra aggiunta!", "success")
        return redirect(url_for("squadre"))
    return render_template("squadre.html", squadre=Squadra.query.all())

# --- PARTECIPANTI ---
@app.route("/partecipanti", methods=["GET", "POST"])
def partecipanti():
    squadre = Squadra.query.all()
    if request.method == "POST":
        nome = request.form["nome"]
        squadra_id = request.form.get("squadra_id")
        data_nascita = request.form.get("data_nascita")
        paese = request.form.get("paese")
        provincia = request.form.get("provincia")

        geolocator = Nominatim(user_agent="classifica_app")
        location = None
        if paese:
            query = f"{paese}, {provincia}, Italia" if provincia else f"{paese}, Italia"
            try:
                location = geolocator.geocode(query, timeout=10)
            except Exception:
                location = None

        lat = location.latitude if location else None
        lon = location.longitude if location else None

        p = Partecipante(
            nome=nome,
            squadra_id=squadra_id,
            paese=paese or None,
            provincia=provincia or None,
            data_nascita=datetime.strptime(data_nascita, "%Y-%m-%d").date() if data_nascita else None,
            lat=lat,
            lon=lon
        )
        db.session.add(p)
        db.session.commit()
        flash("Partecipante aggiunto!", "success")
        return redirect(url_for("partecipanti"))

    return render_template("partecipanti.html", partecipanti=Partecipante.query.all(), squadre=squadre)

# --- CLASSIFICA (pagina separata) ---
@app.route("/classifica")
def classifica():
    squadre = Squadra.query.all()
    totali = [(s, sum(p.punti for p in s.punteggi)) for s in squadre]
    totali.sort(key=lambda x: x[1], reverse=True)
    return render_template("classifica.html", totali=totali)

# --- STATISTICHE (pagina separata) ---
@app.route("/statistiche")
def statistiche():
    persone = Partecipante.query.all()
    giovani = [p for p in persone if p.data_nascita]
    piu_giovane = max(giovani, key=lambda p: p.data_nascita, default=None)
    piu_vecchio = min(giovani, key=lambda p: p.data_nascita, default=None)

    ref_lat, ref_lon = 45.0123, 10.2585
    piu_lontano, distanza = None, None
    for p in persone:
        if p.lat and p.lon:
            d = haversine(ref_lat, ref_lon, p.lat, p.lon)
            if distanza is None or d > distanza:
                distanza = d
                piu_lontano = p

    return render_template("statistiche.html",
                           piu_giovane=piu_giovane,
                           piu_vecchio=piu_vecchio,
                           piu_lontano=piu_lontano,
                           distanza=distanza,
                           ref="Ragazzola (PR)")

# --- ELIMINA GIOCO ---
@app.route("/giochi/<int:gid>/delete", methods=["POST"])
def delete_gioco(gid):
    gioco = Gioco.query.get_or_404(gid)
    db.session.delete(gioco)
    db.session.commit()
    flash("Gioco eliminato!", "success")
    return redirect(url_for("giochi"))

# --- ELIMINA SQUADRA ---
@app.route("/squadre/<int:sid>/delete", methods=["POST"])
def delete_squadra(sid):
    squadra = Squadra.query.get_or_404(sid)
    db.session.delete(squadra)
    db.session.commit()
    flash("Squadra eliminata!", "success")
    return redirect(url_for("squadre"))

# --- ELIMINA PARTECIPANTE ---
@app.route("/partecipanti/<int:pid>/delete", methods=["POST"])
def delete_partecipante(pid):
    partecipante = Partecipante.query.get_or_404(pid)
    db.session.delete(partecipante)
    db.session.commit()
    flash("Partecipante eliminato!", "success")
    return redirect(url_for("partecipanti"))

# --- ELIMINA PUNTEGGIO ---
@app.route("/giochi/<int:gid>/punteggio/<int:pid>/delete", methods=["POST"])
def delete_punteggio(gid, pid):
    punteggio = Punteggio.query.get_or_404(pid)
    db.session.delete(punteggio)
    db.session.commit()
    flash("Punteggio eliminato!", "success")
    return redirect(url_for("gioco_detail", gid=gid))


# --- MAIN ---
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5001, debug=True)

