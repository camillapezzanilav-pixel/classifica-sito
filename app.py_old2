from flask import Flask, render_template, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import os
from math import radians, sin, cos, sqrt, atan2

app = Flask(__name__)
app.secret_key = "supersegreto"

# Configurazione DB PostgreSQL da variabile ambiente
db_url = os.environ.get("DATABASE_URL")
if db_url and db_url.startswith("postgres://"):
    db_url = db_url.replace("postgres://", "postgresql://", 1)

if not db_url:
    raise RuntimeError("❌ DATABASE_URL non impostata. Aggiungila su Render.")

app.config["SQLALCHEMY_DATABASE_URI"] = db_url
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
db = SQLAlchemy(app)


# --- MODELLI ---
class Squadra(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False, unique=True)
    partecipanti = db.relationship("Partecipante", backref="squadra", lazy=True)
    punteggi = db.relationship("Punteggio", backref="squadra", lazy=True)


class Gioco(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False, unique=True)
    punteggi = db.relationship("Punteggio", backref="gioco", lazy=True)


class Partecipante(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False)
    data_nascita = db.Column(db.Date)
    paese = db.Column(db.String(100))
    provincia = db.Column(db.String(10))
    squadra_id = db.Column(db.Integer, db.ForeignKey("squadra.id"), nullable=False)
    lat = db.Column(db.Float)
    lon = db.Column(db.Float)


class Punteggio(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    punti = db.Column(db.Float, default=0)
    squadra_id = db.Column(db.Integer, db.ForeignKey("squadra.id"), nullable=False)
    gioco_id = db.Column(db.Integer, db.ForeignKey("gioco.id"), nullable=False)


# --- Creazione forzata delle tabelle ---
@app.before_request
def create_tables():
    db.create_all()


# --- ROUTES ---
@app.route("/")
def home():
    squadre = Squadra.query.all()
    totali = [(s, sum(p.punti for p in s.punteggi)) for s in squadre]
    totali.sort(key=lambda x: x[1], reverse=True)

    partecipanti = Partecipante.query.all()
    giovani = [p for p in partecipanti if p.data_nascita]
    piu_giovane = max(giovani, key=lambda p: p.data_nascita, default=None)
    piu_vecchio = min(giovani, key=lambda p: p.data_nascita, default=None)

    ref_lat, ref_lon = 45.0123, 10.2585
    piu_lontano, distanza = None, None
    for p in partecipanti:
        if p.lat and p.lon:
            dlat = radians(p.lat - ref_lat)
            dlon = radians(p.lon - ref_lon)
            a = sin(dlat/2)**2 + cos(radians(ref_lat))*cos(radians(p.lat))*sin(dlon/2)**2
            dist = 2*6371*atan2(sqrt(a), sqrt(1-a))
            if distanza is None or dist > distanza:
                distanza = dist
                piu_lontano = p

    return render_template(
        "home.html",
        totali=totali,
        piu_giovane=piu_giovane,
        piu_vecchio=piu_vecchio,
        piu_lontano=piu_lontano,
        distanza=distanza,
        ref="Ragazzola (PR)"
    )


@app.route("/giochi", methods=["GET", "POST"])
def giochi():
    if request.method == "POST":
        nome = request.form["nome"]
        if nome:
            db.session.add(Gioco(nome=nome))
            db.session.commit()
            flash("Gioco aggiunto!", "success")
        return redirect(url_for("giochi"))

    return render_template("giochi.html", giochi=Gioco.query.all())


@app.route("/giochi/<int:gid>", methods=["GET", "POST"])
def gioco_detail(gid):
    gioco = Gioco.query.get_or_404(gid)
    squadre = Squadra.query.order_by(Squadra.nome.asc()).all()

    if request.method == "POST":
        for s in squadre:
            val = request.form.get(f"punti_{s.id}")
            if val:
                try:
                    punti = float(val.replace(",", "."))
                except ValueError:
                    punti = 0
                punteggio = Punteggio.query.filter_by(squadra_id=s.id, gioco_id=gioco.id).first()
                if not punteggio:
                    punteggio = Punteggio(squadra_id=s.id, gioco_id=gioco.id)
                    db.session.add(punteggio)
                punteggio.punti = punti
        db.session.commit()
        flash("Punteggi aggiornati!", "success")
        return redirect(url_for("gioco_detail", gid=gid))

    punteggi = {p.squadra_id: p.punti for p in gioco.punteggi}
    return render_template("gioco_detail.html", gioco=gioco, squadre=squadre, punteggi=punteggi)


@app.route("/giochi/<int:gid>/delete", methods=["POST"])
def delete_gioco(gid):
    gioco = Gioco.query.get_or_404(gid)
    db.session.delete(gioco)
    db.session.commit()
    flash("Gioco eliminato!", "success")
    return redirect(url_for("giochi"))


@app.route("/squadre", methods=["GET", "POST"])
def squadre():
    if request.method == "POST":
        nome = request.form["nome"]
        if nome:
            db.session.add(Squadra(nome=nome))
            db.session.commit()
            flash("Squadra aggiunta!", "success")
        return redirect(url_for("squadre"))

    return render_template("squadre.html", squadre=Squadra.query.all())


@app.route("/squadre/<int:sid>/delete", methods=["POST"])
def delete_squadra(sid):
    squadra = Squadra.query.get_or_404(sid)
    db.session.delete(squadra)
    db.session.commit()
    flash("Squadra eliminata!", "success")
    return redirect(url_for("squadre"))


@app.route("/partecipanti", methods=["GET", "POST"])
def partecipanti():
    if request.method == "POST":
        nome = request.form["nome"]
        data_nascita = request.form.get("data_nascita")
        paese = request.form.get("paese")
        provincia = request.form.get("provincia")
        squadra_id = request.form.get("squadra_id")

        nascita = datetime.strptime(data_nascita, "%Y-%m-%d").date() if data_nascita else None
        if nome and squadra_id:
            p = Partecipante(
                nome=nome,
                data_nascita=nascita,
                paese=paese,
                provincia=provincia,
                squadra_id=int(squadra_id)
            )
            db.session.add(p)
            db.session.commit()
            flash("Partecipante aggiunto!", "success")
        return redirect(url_for("partecipanti"))

    return render_template("partecipanti.html", partecipanti=Partecipante.query.all(), squadre=Squadra.query.all())


@app.route("/partecipanti/<int:pid>/delete", methods=["POST"])
def delete_partecipante(pid):
    partecipante = Partecipante.query.get_or_404(pid)
    db.session.delete(partecipante)
    db.session.commit()
    flash("Partecipante eliminato!", "success")
    return redirect(url_for("partecipanti"))


@app.route("/classifica")
def classifica():
    squadre = Squadra.query.all()
    totali = [(s, sum(p.punti for p in s.punteggi)) for s in squadre]
    totali.sort(key=lambda x: x[1], reverse=True)
    return render_template("classifica.html", totali=totali)


@app.route("/statistiche")
def statistiche():
    partecipanti = Partecipante.query.all()
    giovani = [p for p in partecipanti if p.data_nascita]
    piu_giovane = max(giovani, key=lambda p: p.data_nascita, default=None)
    piu_vecchio = min(giovani, key=lambda p: p.data_nascita, default=None)

    ref_lat, ref_lon = 45.0123, 10.2585
    piu_lontano, distanza = None, None
    for p in partecipanti:
        if p.lat and p.lon:
            dlat = radians(p.lat - ref_lat)
            dlon = radians(p.lon - ref_lon)
            a = sin(dlat/2)**2 + cos(radians(ref_lat))*cos(radians(p.lat))*sin(dlon/2)**2
            dist = 2*6371*atan2(sqrt(a), sqrt(1-a))
            if distanza is None or dist > distanza:
                distanza = dist
                piu_lontano = p

    return render_template(
        "statistiche.html",
        piu_giovane=piu_giovane,
        piu_vecchio=piu_vecchio,
        piu_lontano=piu_lontano,
        distanza=distanza,
        ref="Ragazzola (PR)"
    )


if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5001)

